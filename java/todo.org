* TODO
** 学习这些问题
  https://news.cnblogs.com/n/555659/
  　1）Java 的数据结构相关的类实现原理，比如 LinkedList，ArrayList，HashMap，TreeMap 这一类的。以下简单模拟一个数据结构的连环炮。

　　比如，面试官先问你 HashMap 是不是有序的？

　　你肯定回答说，不是有序的。那面试官就会继续问你，有没有有顺序的 Map 实现类？

　　你如果这个时候说不知道的话，那这个问题就到此结束了。如果你说有 TreeMap 和 LinkedHashMap。

　　那么面试官接下来就可能会问你，TreeMap 和 LinkedHashMap 是如何保证它的顺序的？

　　如果你回答不上来，那么到此为止。如果你依然回答上来了，那么面试官还会继续问你，你觉得它们两个哪个的有序实现比较好？

　　如果你依然可以回答的话，那么面试官会继续问你，你觉得还有没有比它更好或者更高效的实现方式？

　　如果你还能说出来的话，那么就你所说的实现方式肯定依然可以问你很多问题。

　　以上就是一个面试官一步一步提问的例子。所以，如果你了解的不多，千万不要敷衍，因为可能下一个问题你就暴露了，还不如直接说不会，把这个问题结束掉，赶紧切换到你熟悉的领域。

　　2）Java 并发包当中的类，它们都有哪些作用，以及它们的实现原理，这些类就是 java.concurrent 包下面的。与上面一样，咱们也简单的模拟一个并发包的连环炮。

　　比如面试官可能会先问你，如果想实现所有的线程一起等待某个事件的发生，当某个事件发生时，所有线程一起开始往下执行的话，有什么好的办法吗？

　　这个时候你可能会说可以用栅栏（Java 的并发包中的 CyclicBarrier），那么面试官就会继续问你，你知道它的实现原理吗？

　　如果你继续回答的话，面试官可能会继续问你，你还知道其它的实现方式吗？

　　如果你还能说出很多种实现方式的话，那么继续问你，你觉得这些方式里哪个方式更好？

　　如果你说出来某一个方式比较好的话，面试官依然可以继续问你，那如果让你来写的话，你觉得还有比它更好的实现方式吗？

　　如果你这个时候依然可以说出来你自己更好的实现方式，那么面试官肯定还会揪着这个继续问你。

　　为什么说面试的时候要引导面试官，原因就在这了。因为面试官的提问很多时候都是有迹可循的，你如果抓住了他的轨迹，能够猜到他下面很可能会问什么，那你在回答的时候就可以往你想要谈的方向去说。这样面试时就会显得更加从容，更加的游刃有余。

　　3）IO 包和 NIO 包中的内容。这部分里面 NIO 会是重点，IO 包大部分都会比较熟悉，因此可能会直接略过，直接问你 NIO 的内容。

　　IO 包和 NIO 包的内容相对来说不是很多，首先 NIO 模型要熟悉，特别是其中的 selector 一定要非常清楚它的职责和实现原理。其实 NIO 的核心是 IO 线程池，一定要记住这个关键点。有的时候，面试官可能也会问你 IO 包的设计模式（装饰器模式），为什么要这样设计？

　　有的面试官还会问你有没有更好的设计，这个时候如果你不知道请果断说自己现在的水平有限，想不出来更好的设计，千万不要信口开河，随意 YY。

　　4）Java 的虚拟机的内容。这部分主要包括三部分，GC、类加载机制，以及内存。

　　一个 GC 部分简单的连环炮。

　　面试官可以先问你什么时候一个对象会被 GC？

　　接着继续问你为什么要在这种时候对象才会被 GC？

　　接着继续问你 GC 策略都有哪些分类？

　　你如果说出来了，继续问你这些策略分别都有什么优劣势？都适用于什么场景？

　　你继续说出来了以后，给你举个实际的场景，让你选择一个 GC 策略？

　　你如果选出来了，继续问你，为什么要选择这个策略？

　　下面是关于类加载机制的简单连环炮。

　　首先肯定是先问你 Java 的类加载器都有哪些？

　　回答了这些以后，可能会问你每个类加载器都加载哪些类？

　　说完以后，可能会问你这些类加载之间的父子关系是怎样的？

　　你在回答的时候可能会提到双亲委派模型，那么可以继续问你什么是双亲委派模型？

　　你解释完了以后，可能会继续问你，为什么 Java 的类加载器要使用双亲委派模型？

　　你回答完以后，可能会继续问你如何自定义自己的类加载器，自己的类加载器和 Java 自带的类加载器关系如何处理？

　　再来一个关于内存的连环炮。

　　首先肯定就是问你内存分为哪几部分，这些部分分别都存储哪些数据？

　　然后继续问你一个对象从创建到销毁都是怎么在这些部分里存活和转移的？

　　接着可能会问你，内存的哪些部分会参与 GC 的回收？

　　完事以后，可能还会问你 Java 的内存模型是怎么设计的？

　　你回答了以后，还会继续问你为什么要这么设计？

　　问完以后，还可能会让你结合内存模型的设计谈谈 volatile 关键字的作用？

　　你在谈的时候，肯定会提到可见性，那么接着可见性这三个字，还可以继续问你并发的内容。

　　基本上 Java 语言本身以及语言稍微高级点的内容就是以上部分，如果你能把以上四部分了解的非常透彻，那基本上 Java 这部分就没啥问题了，因为光以上的内容就够你跟面试官聊很久了。你聊这些聊得久了，自然问你其它问题的时间就会短点。

　　你从 LZ 写这些问题的过程也应该能感受出来，很多时候，面试官都是顺着一条线一路问下去的，如果你觉得这条线你不熟悉的话，就要及时拐弯，引导面试官去问其它方面的问题。千万不要一直往下深入，直到自己跳不出来为止，那就尴了个尬了。
** things to be learned
   - basics: 
     - [X] exception
     - [X] annotation
     - [X] inner classes
     - [X] enumration
   - library: lang, concurrent, collection, io(noi)
   - framework: spring, mybatis
     学习的标准是理解关键概念，大致知道所有的功能，熟悉常用功能用法，并且有一些实际例子。
   - jvm: gc related things.
   - 消息队列及缓存系统： MQ, kafka, redis, memcache
   - 数据库： 关系数据库（mysql），及NOSQL数据库。
   
   
   java的工作起价是10000了。

   should like an expert on all those areas.
   
** DONE learn fail-fast
   <2016-11-10 Thu>
   在多个 地方看到了这个词，说明它是一个重要的词汇。 最近一次， 是在 ConcurrentModificationException中。

   是iterator的一种类型。 在多线程环境下，当线程A在遍历时，纯种B修改了数据，则A会throw ConcurrentModificationException 出来，造成程序失败结束。实现：使用一个volatile的counter变量。每次更新数据时， 这个值+1，通过比较iterator创建时和实时的值是否相同来判断数据是否改变。

   还有一种是fast-safe， 或者叫weakly-cosistent, 不会抛出异常。
   
** 收集一些案例分析
   <2016-11-10 Thu> 
   作为面试时的亮点。可以从一些分析疑难问题的文章中。
** 学习javadoc的规则
   如标签。 如@throws 标签指定函数会抛出哪些异常。
