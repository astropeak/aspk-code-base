* Serialization
** A tutorial
   http://www.tutorialspoint.com/java/java_serialization.htm
   
   The transient keywords:
   mark that a field should not be serialized. And why it is not a anotation like @DoNotSerialize? Maybe because anotation is not available then?
   
   一个程序：
   #+begin_src java
   class SerialDemo {
       public static void serilizeObj(Collection<?> obj){
           FileOutputStream fo=null;
           ObjectOutputStream oo=null;
           try {
               fo = new FileOutputStream("./obj.ser");
               oo = new ObjectOutputStream(fo);
               for(Object o:obj){
                   oo.writeObject(o);
               }
               oo.close();
               fo.close();
           } catch (IOException e) {
               e.printStackTrace();
           }
       }
   
       public static Collection<Object> deSerilizeObj(){
           Collection<Object> rst = new ArrayList<Object>();
           try {
               FileInputStream fi = new FileInputStream("./obj.ser");
               ObjectInputStream oi= new ObjectInputStream(fi);
   
               //when no object avaliable, a EOFException will be throwed.
               rst.add(oi.readObject());
               rst.add(oi.readObject());
               rst.add(oi.readObject());
               rst.add(oi.readObject());
               rst.add(oi.readObject());
               oi.close();
               fi.close();
           } catch (IOException e){
               System.out.println("ssssss");
               //e.printStackTrace();
           } catch (ClassNotFoundException e){
               e.printStackTrace();
           }
           return rst;
       }
   }
   #+end_src
   
** serialVersionUID
   https://www.mkyong.com/java-best-practices/understand-the-serialversionuid/
   - Every class that implements Serializable should have a 'private static final long serialVersionUID' field. If not provided, the jvm will generate one.
   - The field can be used as version number of that class. When the contents of the class(such as a new field added), you should update this info. then you prevent your new code from deserialing the old object incorrectly.
   - But its value is a random number, it has no history version. This is enough, because the only requirement if it is different from all older ones. Using a random value has a very low possiblity to be the same with a old one.
   - Problems when the value is generated by JVM. Then between two different JVMs, the value may be different. Then an object serialized by JVM A can't be deserialized by JVM B.
   - The value can be same for different object.
   - a builtin tool to generate serial ver: 'serialver'
     http://www.mkyong.com/java/how-to-generate-serialversionuid/
     #+begin_src sh
     serialver ClassName
     #+end_src
