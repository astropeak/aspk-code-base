* cross site communication
  send by postMessage, receive by listen to 'message' event.
  The MDN page is quite good:
  https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
  
** APIs
*** send: otherWindow.postMessage(message, targetOrigin, [transfer])
    window should be the target's window object, instead of the sender's window object.
    The target's window object can be obtained by
    1. window.open
    2. iframe.contentWindow
    3. window.frames[i]
       
    Parameters:
    1. message is a string be be sent.
    2. targetOrigin: the receiver's domain name.
       
    examples:
    #+begin_src js
    /*
     ,* In window A's scripts, with A being on <http://example.com:8080>:
     ,*/
    var popup = window.open(...popup details...);
    
    // When the popup has fully loaded, if not blocked by a popup blocker:
    // This does nothing, assuming the window hasn't changed its location.
    popup.postMessage("The user is 'bob' and the password is 'secret'",
                      "https://secure.example.net");
    
    // This will successfully queue a message to be sent to the popup, assuming
    // the window hasn't changed its location.
    popup.postMessage("hello there!", "http://example.org");
    
    function receiveMessage(event)
    {
        // Do we trust the sender of this message?  (might be
        // different from what we originally opened, for example).
        if (event.origin !== "http://example.org")
            return;
    
        // event.source is popup
        // event.data is "hi there yourself!  the secret response is: rheeeeet!"
    }
    window.addEventListener("message", receiveMessage, false);
    #+end_src


    
 
*** receive: the message event
    Parameter of the event handler:
    1. data: the string sent by the other window
    2. origin: the origin of the window that sent the message. 
       A origin is a url.
    3. source: a reference to the window object that sent the message.
    
    example:
    #+begin_src js
    /*
     ,* In the popup's scripts, running on <http://example.org>:
     ,*/
    
    // Called sometime after postMessage is called
    function receiveMessage(event)
    {
        // Do we trust the sender of this message?
        if (event.origin !== "http://example.com:8080")
            return;
    
        // event.source is window.opener
        // event.data is "hello there!"
    
        // Assuming you've verified the origin of the received message (which
        // you must do in any case), a convenient idiom for replying to a
        // message is to call postMessage on event.source and provide
        // event.origin as the targetOrigin.
        event.source.postMessage("hi there yourself!  the secret response " +
                                 "is: rheeeeet!",
                                 event.origin);
    }
    
    window.addEventListener("message", receiveMessage, false);
    #+end_src
