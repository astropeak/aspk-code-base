* ajax
  Ajax is an aproatch that combine many existing technology such as HTML, javascript, CSS, DOM, XML, and the XMLHttpRequest object, first introduced in 2005.
  
  ajax stand for asynchronous javascript and XML. But json is widely used now instead of XML.
  
  The MDN page:
  https://developer.mozilla.org/en/docs/AJAX
  
  
  Note on XMLHttpRequest:
  Designed by Microsoft, adopted by Mozilla, Apple, and Google. Now it is stardarded. Despite its name, it can retrive any type of data, not just XML, and can use many protocal, not only http.
  
  The official stardard website:
  https://xhr.spec.whatwg.org/
  The mdn page:
  https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
  
** example of get data
   1. create the XMLHttpRequest object:
      #+begin_src js
      // Old compatibility code, no longer needed.
      if (window.XMLHttpRequest) { // Mozilla, Safari, IE7+ ...
          httpRequest = new XMLHttpRequest();
      } else if (window.ActiveXObject) { // IE 6 and older
          httpRequest = new ActiveXObject("Microsoft.XMLHTTP");
      }
      #+end_src
   2. register readyState change event handler
      #+begin_src js
      httpRequest.onreadystatechange = function() {
          if (httpRequest.readyState === XMLHttpRequest.DONE) {
              // ajax operation done here
              if (httpRequest.status === 200) {
                  alert(httpRequest.responseText);
              } else {
                  alert('There was a problem with the request.');
              }
          }
      
      }
      #+end_src
      The event handler will be called when readyState changed. readyState will have below values:
      | value | state            | meaning                                       |
      |-------+------------------+-----------------------------------------------|
      |     0 | UNSENT           | Client has been created, open() not be called |
      |     1 | OPENED           | open() has been called                        |
      |     2 | HEADERS_RECEIVED | sent() has been called, and headers           |
      |       |                  | and status are avaliable                      |
      |     3 | LOADING          | downloading, responseText holds partial data  |
      |     4 | DONE             | the operation is complete                     |
      Ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState
      
      The handler function will be called when open() and send() called, so register should be done before calling those two functions.
   3. open connection
      #+begin_src js
      httpRequest.open('GET', "http://localhost:3000/aaa.bbb", true);
      #+end_src
      After this line, httpRequest.readyState will be changed to 1.
   4. send data
      #+begin_src js
      httpRequest.send(null);
      #+end_src
      Because the method is 'GET', so no data to send.
      After this line, httpRequest.readyState will be changed to 2.

** property
   1. readyState: current ajax state, see example step 2.
   2. status: http response status. 200 is the fine value.
   3. responseText: the data as text
   4. responseXML: the data as XML
** set request header
   Note that if you want to POST data, you may have to set the MIME type of the request. For example, use the following line before calling send() for form data sent as a query string:
   #+begin_src js
httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
   #+end_src
   But seems this doesn't work if it is application/json.
   
** thinkings
   1. With ajax, web service can be built.
      and also web API.
      Because you can request any data(expeciallly JSON) instead of only HTML.
** get JSON data
   1. on client side, use JSON.parse
      #+begin_src js
           var a = JSON.parse(httpRequest.responseText);
      #+end_src
   2. on server side, use JSON.stringify
      #+begin_src js
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.write(JSON.stringify({"name":"Tom", "age":18}));
            res.end('');
      #+end_src
      Note: if Content-Type not given, the responseText will be treated as application/xml.
      
      
   
** post data and get response
   Just set the requeset herder Content-Type to application/x-www-form-urlencoded, and send the data in post form data format, which is "key1=value1&key2=value2&...&keyN=valueN". values should not contain special chars, can be done with function 'encodeURIComponent'
   #+begin_src js
   function makeRequest(url, userName) {
     httpRequest.onreadystatechange = alertContents;
     httpRequest.open('POST', url);
     httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
     httpRequest.send('userName=' + encodeURIComponent(userName));
   }
   #+end_src
   Note: the server side should also be updated to receive the post data.
*** TODO practice this
