
* Implementation notes
  关于动态生成代码及macro的一些思考:
  在aspk/advice-add函数中，首先根据输入参数生成defadvice的代码，然后eval. Lisp的数据、代码一致发挥了重大的作用。本来生成的defadvice是一个list数据，但它又可当作代码来运行。
  生成代码注意点:
  1. if语句判断条件如果是依赖于生成的list以外的变量，则生成后的list肯定不包含这个if语句，而只包含它的某个分支语句。
  2. backquote ` and evaluate , 这两个函数对于动态生成代码非常关键。

  3. 使用eval执行生成的代码。

  4. 自己生成代码与macro的机制及技巧相仿，只不过代码生成时机不同。前者是在运行时生成，后者是在编译时。

  5. 调试时，可先将动态生成的代码保存在一个变量里打出来，确保生成了正确的代码。


  动态生成代码及执行感觉与其它编程语言非常不同。感觉很奇特。

  通过将ad-do-it封装在一个lambda语句中，防止了它提前执行，而是可当作一个参数传出来。
  