* IO 操作
  - Note taken on [2016-12-30 Fri 22:31] \\
    done for pcs
  1. 打开文件。指定MODE，读或写。
  2. 读入数据或写出数据
  3. 关闭文件
** 打开文件
   使用open 函数。
   #+begin_src perl
   open filehandle, mode, filename
   #filename 可以是一个表达式。
   #+end_src
   
   mode是："<", ">", ">>", "+<", "+>", "+>>", "|-", "-|"。有+号表示同时读写。
   
   一些例子:
   #+begin_src perl
   # 打开一个输入文件
   open my $fh, "<", "file.txt" or die "Can't open file";
   
   # 打开一个输出文件
   open my $fh, ">", "file.txt" or die "Can't open file";
   
   # append
   open my $fh, ">>", "file.txt" or die "Can't open file";
   #+end_src

   open a file whose dir not exist
   #+begin_src perl :results output
   open my $fh, ">", "aaa/bbb/ccc.txt" or die "Can't open file";
   #+end_src

   #+RESULTS:

** 读入、写出数据
*** 读取
    #+begin_src perl
    #读取一行
    my $line = <$fh>;

    # 读取若干字节
    # read filehandle, scalar, length, offset
    # 从filehandle里，读取最多length个字符，保存在变量scalar里。如果提供了offset，则保存在变量scalar的offset 位置上。
    # 返回值为实际读取的字节数目。0 如果EOL，读取错误，则为undef。
    # 读取位置为未读取的第一个字符。由perl自动更新。
    
    # binmode的作用：防止perl自动将C-MC-J 转换为\n.
    binmode $fh;
    $n = read $fh, $s, 4;
    
    
    # 使用read函数读取文件的所有内容。
    my ($n, $buf, $s);
    while (($n=read $fh, $s, 4) != 0) {
    $buf.=$s;
    }
    
    # 使用第四个参数
    my ($n, $s, $offset);
    while (($n=read $fh, $s, 4, $offset)!=0) {
    $offset += 4;
    }
    #+end_src
*** 一次性读取文件所有内容到一个字符串
    just let ~$/~ to ~undef~. One method to do this is: ~local $/~
    #+begin_src perl :results output
    open my $fh, "<", "usage-io.org" or die "can't open file";
    local $/; # comment this line and try angin.
    $s = <$fh>;
    print $s;
    #+end_src

*** 写出
    #+begin_src perl
    # 使用print函数，只不过第一个参数为filehandle. 注意第一个参数后面不加逗号。
    print $fh "aaa", "bbb";
    #+end_src
    
** 关闭文件
   如果不显式关闭，则在脚本结束时，会自动关闭。当向另一个程序pipe数据时必须显式关闭，才能触发EOF。
   #+begin_src perl
   close filehandler
   #+end_src
   
** flush immediately
   http://perl.plover.com/FAQs/Buffering.html

   select((select(LOG), $|=1)[0]);

In Perl, you can't turn the buffering off, but you can get the same benefits by making the filehandle hot. Whenever you print to a hot filehandle, Perl flushes the buffer immediately. In our log file example, it will flush the buffer every time you write another line to the log file, so the log file will always be up-to-date.

Here's how to make the filehandle hot:

	{ my $ofh = select LOG;
	  $| = 1;
	  select $ofh;
	}

The key item here is the $| variable. If you set it to a true value, it makes the current filehandle hot. What's the current filehandle? It's the one last selected with the select operator. So to make LOG hot, we `select' it, set $| to a true value, and then we re-`select' whatever filehandle was selected before we selected LOG. 
