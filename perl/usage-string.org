* string
** create string that spreads on several lines
   A quite good explanation: http://perlmaven.com/here-documents
*** method 1: here doc
    syntax: "<<LABEL; .... LABEL"
    
    #+begin_src perl :results output
    $name="Jim";
    $str = <<MMMM;
    $name
    this is a
        string
        that spreads on
        several lines.
    
    Good
    MMMM
    print $str
    #+end_src
    
    #+RESULTS:
    : Jim
    : this is a
    :     string
    :     that spreads on
    :     several lines.
    : 
    : Good
    
*** ~q~ or ~qq~ operator
    syntax: q{STR go here}, or qq{STR go here}.
    for variable interpolating, q like ', qq line ".

    #+begin_src perl :results output
    $name="Jim";
    $str = qq{$name
    this is a
        string
        that spreads on
        several lines.
    
    Good};
    print $str;
    #+end_src

    #+RESULTS:
    : Jim
    : this is a
    :     string
    :     that spreads on
    :     several lines.
    : 
    : Good
    
** substr
   return sub str or replace sub str

   syntax:
   substr EXP, offset, len, replacement

   #+begin_src perl :results output
   $s="AABB CC DD";
   print substr($s, 8, 2)."\n";
   print "$s\n";
   print substr($s, 8, 2, "FF")."\n";
   print "$s\n";
   print substr($s, 0, 2, "")."\n";
   print "$s\n";
   #+end_src

   #+RESULTS:
   : DD
   : AABB CC DD
   : DD
   : AABB CC FF
   : AA
   : BB CC FF

** get string length
   #+begin_src perl :results output
   print length("AABBCCDD");
   #+end_src

   #+RESULTS:
   : 8

** char count in a string
   #+begin_src perl :results output
   $str = "aabbb\nccc\nadddabcd";
   # $cnt = map {$_} ($str=~/a/g);
   $cnt = @{[$str=~/\n/g]};
   print "$cnt";
   #+end_src

   #+RESULTS:
   : 2

   Problem:
   what's the return value of '$s=~/a/g'?
   => it is an array in list context. See below example.
   #+begin_src perl :results output
   $str = "aabbb\nccc\naddab";
   # $cnt = map {$_} ($str=~/a/g);
   @cnt = $str=~/c/g;
   print @cnt;
   #+end_src

   #+RESULTS:
   : ccc

** split string
   #+begin_src perl :results output
   $a="AAA BBB\t CCC";
   @b=split(/\s+/, $a);
   print join ", ", @b;
   #+end_src

   #+RESULTS:
   : AAA, BBB, CCC

   Note:
   - The third parameter is the max split count.

** interpolation function call in a string
   #+begin_src perl :results output
   sub aaa{my $a=shift; return "In aaa, arg $a\n";};
   my $b="DDD";
   my $str="AAAAA, ${\aaa($b)}";
   #my $str=qq{AAAAA, ${\aaa($b)}}; # will doing the same thing.
   print $str;
   
   my @aa=(4,5,6);
   my $str1="BB, ${sub {join ', ', @aa}}"; #this doesn't work
   print $str1;
   #+end_src

   #+RESULTS:

** increase string
   #+begin_src perl :results output
   $s = "AB";
   ++$s;
   print $s;
   #+end_src

   #+RESULTS:
   : AC


   But when number contained in the string, then the string will be treated as a number.