* reg exp
  a good tutorial: http://www.troubleshooters.com/codecorn/littperl/perlreg.htm
** wildcards
   .   Match any character
   \w  Match "word" character (alphanumeric plus "_")
   \W  Match non-word character
   \s  Match whitespace character (same as [ \t\n\r\v])
   \S  Match non-whitespace character
   \d  Match digit character
   \D  Match non-digit character
   \t  Match tab
   \n  Match newline
   \r  Match return
   \f  Match formfeed
   \a  Match alarm (bell, beep, etc)
   \e  Match escape
   \021  Match octal char ( in this case 21 octal)
   \xf0  Match hex char ( in this case f0 hexidecimal)

** create regexp from string
   #+begin_src perl :results output
   my $str = "a[1-3]";
   my $regex      = qr/$str/;
   
   if ("a2" =~ $regex) {
       print "Matched\n";
   }
   #+end_src

   #+RESULTS:
   : Matched

   
** modifiers
   | modifier | function                                                   |
   |----------+------------------------------------------------------------|
   | /s       | let '.' match newline                                      |
   | /x       | ignore whitespace in the pattern, so you can add blanks to |
   |          | let the pattern more readable                              |
   | /i       | ignore case                                                |
   
** anchors
   | anchor | function                            |
   |--------+-------------------------------------|
   | ^      | match at begining of string         |
   | $      | at end                              |
   | \b     | match at word boundary. word is \w+ |
   | \B     | match not at word boundary          |

   examples:
   #+begin_src perl :results output
   /\bsearch\B/ #will match searching, searched, but not search
   /\bfish\b/ #will only match fish, but not selfishness
   #+end_src
** capture named groups
   Syntax: ~(?<name>xxxxx)~
   The captured content will be saved in ~%+~
   #+begin_src perl :results output
   my $s="This is Tom Green";
   $s =~ m/This is (?<FirstName>\w+) (?<SecondName>\w+)/;
   print "$+{FirstName}, $+{SecondName}\n";
   #+end_src

   #+RESULTS:

** misc
*** `=~' is called binding operator
    See chapter 8. Left is a variable or string, right is a regexp. Let the regexp match againest the left string.
