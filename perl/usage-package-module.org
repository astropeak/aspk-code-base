* module and package
** docs
   A good explainatoin on perl module: https://en.wikipedia.org/wiki/Perl_module
   
** what is a perl module
   A perl module is just a file named "*.pm",  and can be "included"(required) in other perl files(both ".pm" and ".pl" files).
   
** how to load/include a module
   First, the root directory for the module should be added to PERL5LIB environment variable. Current directory are always in PERL5LIB.
   
   Including syntax:
   Suppose a module locates in ~Demo/StringUtils.pm~, you can load it with:
   
   ~require Demo::StringUtils~

   Just replace ~/~ in the file path with ~::~.

** what is a perl package   
   package is a software concept, it is namespace. 

   Default package is main. 

   all sub:s and variables are defined under current namespace.

** how to set current package
   Current package can be changed at any where in the code.
   
   Builtin function ~package~ is used to change current package.
   
   ~package Food::potato  # the following sub and variable will all defined in Food::potato namesapce.~
   
   ~Food::potato::say() # call say sub of package Food::potato.~

** relationship between module and package   
   Module and package are independent things. 
   
   Good practice is:
   
   only define packages in a module file, and the package name and module name are the same.
   
** steps of writing a module
   Suppose the module file path is ~Aspk/debug.pm~
   1. [optional] define current package name at the begining of the module file
      
      ~package Aspk::debug~
      
      Although it is optional, it is good practice to do this step.
      
   2. [optional] write embedded POD documents
      
      A line start with ~=~ is a documents. ~=cut~ end the documents.
      
      The document can be put anywhere in the file.
      
      Example:
      #+begin_src perl
      =head1 NAME
      Aspk::debug - debug utils.
      
      =head1 SYNOPSIS
      
        use Aspk::debug;
        printHash({"AA"=>"aa", "BB"=>"bb"})
      =head1 DESCRIPTION
      
      =head2 Functions
      
      The following functions are exported by default
      
      =head3 printHash
      
             printHash({"AA"=>"aa", "BB"=>"bb"})
      =cut
      #+end_src
      
   3. [optional] export some functions or variables to the user
      
      A good ref: http://www.thegeekstuff.com/2010/06/perl-exporter-examples/
      
      If exporting some functions, the user don't need to type the package name when using those functions. These functions are imported to current package of the user when the module was loaded.
      
      Module ~Exporter~ is used to export. It defines two array variables: ~@EXPORT~, ~@EXPORT_OK~. Just assign the names you want to export to those variables.
      #+begin_src perl
      use Exporter;
      @ISA=qw(Exporter); #inheritance import function form Exporter.
      @EXPORT_OK=qw(printHash);
      #+end_src
      
      Names assigned to ~@EXPORT_OK~ will be imported to user's current package on demand.
      
      Names assigned to ~@EXPORT~ will be imported to user's current package imediatly.
      
      Use the Aspk::debug module: ~use Aspk::debug~. Then all names assigned to ~@EXPORT~ will be imported to current package.
      
      Use the Aspk::debug module: ~use Aspk::debug qw(printHash)~. Then only ~printHash~ imported to current package.
      
      The second is better. So always use ~@EXPORT_OK~.
   4. define some sub:s and variables
      
      This is the main content of the module.
   5. return a ~true~ value at end of the module file
      
      A perl module must end with a true value else it is considered not load successfully. The usually way to do this is put below line to the end of the file:
      #+begin_src perl
      1;
      #+end_src

** misc
*** ~require~ function
    load a perl module.

    ~require Aspk::debug;~ means load file ~Aspk/debug.pm~ in loading path, which is specified by ~@INC~.
*** ~use~ function
    load a perl module and calling the module's ~import~ function.

    offcial doc: http://perldoc.perl.org/functions/use.html

    ~use Module LIST~ is excatly the same as 
    #+begin_src perl
    BEGIN {
        require Module;
        Module->import(LIST);
    }
    #+end_src

** how functions of a module are imported to another package
   Import functions of another module to current package will let you not giving the whole function name(moduleName::functionName) when calling that function.

   Suppose there is a module file named ~Aspk/debug.pm~, and a file ~debug_example.pl~ that use that module.

   File ~Aspk/debug.pm~
   #+begin_src perl
   package Aspk::debug;
   use Exporter;
   @ISA=qw(Exporter);
   @EXPORT_OK=qw(printHash);
   sub printHash{
       # ...
   }
   1;
   #+end_src

   File ~debug_example.pl~
   #+begin_src perl
   use Aspk::debug qw(printHash);
   printHash();
   #+end_src

   It is the ~import~ function of module ~Aspk::debug~ that imported the ~printHash~ function to current package in file ~debug_example.pl~. 

   This function is called when ~use Aspk::debug qw(printHash)~ executed.

   This function is defined in class ~Exporter~, and ~Aspk::debug~ inheritatd it(by this line: ~@ISA=qw(Exporter)~).
** symbol table
   official doc: http://perldoc.perl.org/perlmod.html#Symbol-Tables
   
   The hash ~%PACKAGE_NAME::~ stores all symbols in that package, including all package variables and subs.
   #+begin_src perl :results output
   package A;
   $a=1;
   my $b=2; # this will not in symbol table of the package.
   sub sub1{print "aaa";}

   package main;
   print join ", ", sort keys(%A::);
   #+end_src
   
   #+RESULTS:
   : a, sub1
   
** typeglob
   ~*name~ is a typeglob.
   
   The value in each entry of the symbol table(here the symbol tabel should mean 'name' 's) is what you are referring to when you use the *name typeglob notation.
   
   Assign to a typeglob performs an aliasing operation.

   Difference between ~*foo=*bar~ and ~*foo=\$bar~:

   Result is 2
   #+begin_src perl :results output
   $bar = 1;
   ,*foo = *bar;       # Make *foo an alias for *bar
   {
       local $bar = 2; # Restrict changes to block
       print $foo;     # Prints '1'!
   }
   #+end_src

   #+RESULTS:
   : 2

   Result is 1
   #+begin_src perl :results output
   $bar = 1;
   ,*foo = \$bar;       # Make $foo an alias for $bar
   {
       local $bar = 2; # Restrict changes to block
       print $foo;     # Prints '1'!
   }
   #+end_src

   #+RESULTS:
   : 1

   and array will also be the same when using ~*foo=*bar~:
   #+begin_src perl :results output
   $bar = 1;
   ,*foo = *bar;       # Make *foo an alias for *bar
   @bar=(1,2,3);
   print (@foo,"\n");
   $bar[1]=4;
   print (@foo,"\n");
   #+end_src

   #+RESULTS:
   : 123
   : 143

** the ~*foo{THING}~ syntax
   offcial doc: http://perldoc.perl.org/perlref.html

   A reference can be created by using a special syntax, lovingly known as the *foo{THING} syntax. *foo{THING} returns a reference to the THING slot in *foo (which is the symbol table entry which holds everything known as foo).
   #+begin_src perl :results output
   $scalarref = *foo{SCALAR};
   $arrayref  = *ARGV{ARRAY};
   $hashref   = *ENV{HASH};
   $coderef   = *handler{CODE};
   $ioref     = *STDIN{IO};
   $globref   = *foo{GLOB};
   $formatref = *foo{FORMAT};
   $globname  = *foo{NAME};    # "foo"
   $pkgname   = *foo{PACKAGE}; # "main
   #+end_src
** subroutine definition in another package
   Subroutine definitions (and declarations, for that matter) need not necessarily be situated in the package whose symbol table they occupy. You can define a subroutine outside its package by explicitly qualifying the name of the subroutine:

   #+begin_src perl :results output
   package main;
   sub Some_package::foo { ... }   # &foo defined in Some_package
   #+end_src

   This is just a shorthand for a typeglob assignment at compile time:
   #+begin_src perl :results output
   BEGIN { *Some_package::foo = sub { ... } }
   #+end_src

