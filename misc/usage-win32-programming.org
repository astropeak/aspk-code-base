* win32 programming
** WinMain: the entry function
   line main function in console program.
** infinite loop in WinMain
   #+begin_src C :includes <stdio.h>
   while(GetMessage(&msg, NULL,0,0)){
     TranslateMessage(&msg);
     DispatchMessage(&msg);
   }
   #+end_src
   不管有多少个子窗口，所有消息总是传给WinMain函数中。然后会根据msg中的相关参数，发给具体的窗口去处理。
** window callback
   每个window都有一个callback函数，用于处理发送给该窗口的消息。
   窗口函数的原型为：
   #+begin_src C :includes <stdio.h>
   LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
     switch (message) {
     case WM_COMMAND:
       int wmId=LOWORD(wParam);
       int wmEvent=HIWORD(wParam);
     case WM_DESTROY:
     default:
       return (DefWindowProc(hWnd, message, wParam, lParam));
     }
   
     return 0;
   }
   #+end_src
   接收到一个消息时，再创建一个新的window,则新的window中也会有相应的消息处理机制。
** 创建窗口，同时提供窗口回调函数
   在回调函数中， 又可以创建新的窗口。

   窗口回调函数主要是处理消息，通过switch case语句。MFC中的message map是对这一函数的包装。


   
** a tutorial
*** a simple window application
    http://www.winprog.org/tutorial/simple_window.html
    1. 注册window class
       指定WndProc, 颜色，图标等。保存通用配置。
       一个window class 可以创建多个window 实例。
       API： RegisterClassEx
    2. 创建窗口。
       新建一个窗口。
       给定window class, 标题， 位置，大小等（这些属性都可能变化，因此没有加在window class里）。
       API： CreateWindowEx
    3. 接收消息，处理消息。
       一个死循环。
       DispatchMessage: 判断消息是发送给哪个window的，找到这个window的WinProc，然后调用这个函数。
       可以通过调用GetWindowLong函数找到一个window的WinProc,然后手动调用这个函数，达到相同的效果（但对于一些特殊情况无法处理）。 Msg里面包含hwnd，message, wParam, lParam.

       关闭程序时的消息：
       当用户点击X时，WM_CLOSE消息就会被发送给窗口。调用DestroyWindow来处理这个消息。系统发送WM_DESTROY, 调用 PostQuitMessage, 系统最后发送WM_QUIT，这个时候GetMessage()会返回false, 程序结束。
       
    4. 消息处理函数
       每个窗口都有一个窗口处理函数。
       用户点击等操作后（包括点击任何一个菜单，控件），窗口就会收到一个消息。此时消息将被处理。
*** windows 程序还是比较内聚的。基本上就是处理消息。
    因此学习重点可能就是处理消息了。
*** windows messages list
**** WM_LBUTTONDOWN
     鼠标左键按下。
     
    
*** wParam and lParam
    消息的参数。 并不是每个消息都有参数，不同的消息参数意义不同。
    WM_COMMAND: wParam, HIWORD(wParam)是notification message, LOWORD(wParam)是control or menu id that sent the message. lParam是HWND to the control sent the message.
*** dialog
    dialog也是一个windows， 只不过做了一些方便的特性，方便做交互。

    猜测： model and modeless: 前者不能再点其它窗口的控件，后者则可以。

    从rc ID创建DialogBox，并指定这个dialog box的window proc：
    DialogBox(GetModuleHandle(NULL), MAKEINTRESOURCE(IDD_ABOUT), hwnd, AboutDlgProc);
    这个函数只有在diglog box 被关闭后才会返回。它会有一个处理消息的循环，处理它的所有消息。
    这将创建一个model dialog box

    CreateDialog() 会创建一个modeless diglog box, 函数立即返回，需要显示调用 ShowWindow来显示它。发给这个dialog box的消息会在主循环中调用处理, dialog box没有自己单独的消息处理循环。
    #+begin_src C :includes <stdio.h>
        g_hToolbar = CreateDialog(GetModuleHandle(NULL), MAKEINTRESOURCE(IDD_TOOLBAR),
            hwnd, ToolDlgProc);
        if(g_hToolbar != NULL)
        {
            ShowWindow(g_hToolbar, SW_SHOW);
        }
        else
        {
            MessageBox(hwnd, "CreateDialog returned NULL", "Warning!",  
                MB_OK | MB_ICONINFORMATION);
        }
    #+end_src

*** resource file(.rc file)
    定义资源文件，比如对话框，图标，菜单等。是一个脚本，通过'RC' 编译成.res文件，最后link到代码。
    每个资源有一个ID， 代码通过这个ID使用这个资源。比如对于菜单，可以加载菜单。对于对话框，可以创建这个对话框。
    一般都会有个编辑器专门编辑，不会手动修改。

    例子：
    #+begin_src C :includes <stdio.h>
    IDD_HANDLE_CONNECTION_PARAMETERS DIALOGEX 0, 0, 196, 252
    STYLE DS_SETFONT | DS_MODALFRAME | WS_POPUP | WS_CAPTION
    CAPTION "Favorite List"
    FONT 8, "MS Sans Serif", 400, 0, 0x0
    BEGIN
        PUSHBUTTON      "Save Connection As...",IDC_SAVE,7,7,91,14,WS_DISABLED
        PUSHBUTTON      "Remove",IDC_REMOVE,7,27,50,14,WS_DISABLED
        PUSHBUTTON      "Add Folder",IDC_NEW_FOLDER,139,27,50,14,WS_DISABLED
        CONTROL         "",IDC_PARAMETER_SET_TREE,"SysTreeView32",TVS_HASBUTTONS | TVS_HASLINES | TVS_LINESATROOT | TVS_SHOWSELALWAYS | WS_BORDER | WS_TABSTOP,7,56,182,168
        DEFPUSHBUTTON   "OK",IDOK,39,231,50,14
        PUSHBUTTON      "Cancel",IDCANCEL,108,231,50,14
    END
    #+end_src
    定义了一个对话框，这个对话框中包含5个PUSHBUTTON, 一个CONTROL。
    四个数字指定了位置及大小。

*** standard control
    a control is a window! (这里的window的意思应该是指接收、发送、处理消息的一个东西）。
    比如list box, 它会给包含它的dialog box发送消息，也能够接收消息。如，当前selection变化时，会发送 WM_COMMAND， LBN_SELCHANGE。
    为了获取当前selection值，可以发送 LB_GETCURSEL 给list box。
** add a button control to a window as child
   Note: every conotrol is just a window.

   Just use CreateWindow. To specify a ID to this control, use the last third parameter.
   Second parameter specify the control type, which is predefined window classes.
   The message will be send back to the main message process loop. 
   #+begin_src C :includes <stdio.h>
	hwndButton = CreateWindow( 
    L"BUTTON",  // Predefined class; Unicode assumed 
    L"OK",      // Button text 
    WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,  // Styles 
    200,         // x position 
    10,         // y position 
    100,        // Button width
    100,        // Button height
    hWnd,     // Parent window
    (HMENU)300,       // No menu.
    (HINSTANCE)GetWindowLong(hWnd, GWL_HINSTANCE), 
    NULL);      // Pointer not needed.
   #+end_src

   LOWORD of wParam is ID, HIWORD is control event(for clicking a button, it is BT_CLICKED).
   		wmId    = LOWORD(wParam);
		wmEvent = HIWORD(wParam);
   Usually we will assign a unique ID to all controls. so we can distinguage them in one judgement.

   ref: http://www.win32developer.com/tutorial/windows/windows_tutorial_3.shtm
   https://msdn.microsoft.com/en-us/library/windows/desktop/ms632679(v=vs.85).aspx
** kill a window given its window name and class name
   - ref: http://www.codeproject.com/Articles/22257/Find-and-Close-the-Window-using-Win-API
   - code
     #+begin_src C :includes <stdio.h>
     // retrieve the handler of the window  
     int iHandle = FindWindow("Notepad", "Untitled - Notepad");
     if (iHandle > 0)
       {
         // close the window using API        
         SendMessage(iHandle, WM_SYSCOMMAND, SC_CLOSE, 0);
       } 
     #+end_src



   
** share serial port between two programs on windows
   This is impossible. Because it is a feature of Windows. While it can work on Linux.

   This post gives a solution on how to achieve this: a single server act as an entry to serial port. It gives sample APIs to implement.
   http://www.qtcentre.org/threads/47049-Share-serial-port-between-two-programs-on-Windows
   