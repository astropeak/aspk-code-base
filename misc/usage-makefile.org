* Makefile
  - An artical on how to create generic makefiles, and provides an sample.
    http://www.puxan.com/web/blog/HowTo-Write-Generic-Makefiles
    Note:
    - Should add a tab in the beginning of each recipy line. Or there be a 'missing seperator' error.
    - limitation: if header files changed, will not recompile, because header files are not added as dependency.
    - use wildcard *.cpp to get all cpp files

    The sample
    #+BEGIN_SRC makefile
    # Declaration of variables
    CC = g++
    CC_FLAGS = -w

    # File names
    EXEC = aaa
    SOURCES = $(wildcard *.cpp)
    OBJECTS = $(SOURCES:.cpp=.o)

    # compile and then run. Main target
    run: $(EXEC)
        ./$(EXEC)

    # link
    $(EXEC): $(OBJECTS)
        $(CC) $(OBJECTS) -o $(EXEC)

    # compile To obtain object files
    %.o: %.cpp
        $(CC) -c $(CC_FLAGS) $< -o $@

    # To remove generated files
    clean:
        rm -f $(EXEC) $(OBJECTS)
    #+END_SRC

  - another thread 
    http://stackoverflow.com/questions/3576698/simple-makefile-generation-utility
    
    One solusion using cmake:
    #+begin_src text
    CMake does it and it even creates makefiles and Visual Studio projects. http://www.cmake.org/
    All you need to do is creating a CMakeLists.txt file containing the follwing lines:

    file(GLOB sources *.h *.c *.cxx *.cpp *.hxx *.hpp)
    add_executable(Foo ${sources})

    Then go into a clean directory and type:
    cmake /path/to/project/
    That will create makefiles on that clean build directory.
    #+end_src
    Note:
    - Tried this method and it works. After run, a make file will be generated. Then type `make' to compile.
    - Many files created, the above command can be run in other directory instead of source code directory.
    - Foo is the name of the generated binary.

   Make cmake support boost:
   http://stackoverflow.com/questions/3897839/how-to-link-c-program-with-boost-using-cmake
   A working script:
   #+begin_src text
   cmake_minimum_required(VERSION 2.8)
   # set(Boost_INCLUDE_DIR /usr/local/src/boost_1_46_1)
   # set(Boost_LIBRARY_DIR /usr/local/src/boost_1_46_1/stage/lib)
   find_package(Boost COMPONENTS system filesystem REQUIRED)
   include_directories(${Boost_INCLUDE_DIR})
   link_directories(${Boost_LIBRARY_DIR})
   
   file(GLOB sources *.h *.c *.cxx *.cpp *.hpp *.hxx)
   add_executable(aaa ${sources})
   
   target_link_libraries(aaa ${Boost_LIBRARIES} )
   #+end_src





