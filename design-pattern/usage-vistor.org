* vistor pattern
  Add new functions without modify a class's codes.
  
  wiki上的定义： 为已有类增加虚函数（这个是通用的概念，见下面），而不改变已有类的代码。
  增加虚函数的具体意思：以文件系统的例子，当要增加一个cat操作时，实现cat的vistor，效果相当于直接给类层次加了一个名为cat的虚函数。只不过调用方法有点差异：
  直接添加一个cat虚函数：
  #+begin_src C++ :includes <iostream>
using namespace std;
Node* n = new File(...);
n->cat(); //cat operation on file
n = new Dir(...);
n->cat(); //cat operation on dir
  #+end_src
  通过vistor:
  #+begin_src C++ :includes <iostream>
using namespace std;
Vistor* cat = new CatVistor(...);
Node* n = new File(...);
n->accept(*cat); //cat operation on file
n = new Dir(...);
n->accept(*cat); //cat operation on dir
  #+end_src
  由此看出，只是在调用上有一点点区别。 ~n->accept(Vistor)~ 相当于是一个参数化的虚函数。
  
  优点：
  - 更好的代码划分，类更小
    类只实现基本地功能（这些功能是必须正交的）， 额外的功能通过定义不同的vistor类添加。
  - 符合开放封闭原则
    即对添加新功能开放，对修改源代码封闭。 现在才真正了解了这个概念。
  - 因此也就适应了变化
    但element类变化会造成较大的改动。
    
  适用场景：
  - 文件系统API。 Node类表示一个文件，或目录，是基类。只提供 1 写入内容，2 读取内容，3 获取名称 三个最基本的操作。其它操作比如cat Node内容不应该加在这些类中， 而是通过vistor实现。为什么？加入1 增加Node类的大小， 2 cat的需求可能改变，因此当改变时，Node类的所有子类的实现都要修改。
  - 不同的Element子类对功能的处理不同，
    
** basic knowledge
   1. virtual function
      
      OOP的概念，与普通函数最本质的区别是调用时的确认时间。 普通函数在编译期间就确定了调用的是哪个类的哪个函数（或通过看代码就能确定），而虚函数只有在运行时才能确定调用哪个类的哪个函数（依赖于实际对象）。
      C++中的虚函数的定义只是一种特例。
      
      对于 ~obj.vfunc()~ ， 调用的vfunc在编译期间不能确定是哪个具体函数，需要两个条件：
      1. obj的具体类型不确定，比如它是一个指针或引用
      2. vfunc是一个虚函数

      那由此看来，弱类型语言中函数都是虚函数？因为根本不知道对象的类型。

   2. single dispatch
      dispatch的意思： 运行时，根据参数决定要调用哪个函数。 C++只支持single dispatch，即通过虚函数，根据当前真正的object类型决定调用哪个虚函数。根据参数不同的函数重载在编译期间确定。
   3. double dispatch
      common lisp支持multi dispatch. 见vistor pattern wikipedia上的例子
      
      vistor pattern是C++支持double dispatch 的方式。二者几乎是等价的。
      double dispatch 的二维输入为:(class Element, class Vistor)

   4. multi dispatch

** 一些点
   1. 之前实现的HtmlElement的 traverse 函数就是一个vistor模式。 
      prefunc等输入参数就是vistor， HtmlElement就是不变的类， traverse就是这个类的基本函数。

      不同的prefunc函数（也即不同的vistor），便能够实现不同的功能。

   2. wiki上 common lisp的例子非常有意思。
      common lisp 天生支持multi dispatch, 仅仅通过参数类型不同就可以实现vistor模式，都不需要额外的vistor类。

      为什么在C++中需要vistor类呢？ 

      C++实现cat 函数：
      #+begin_src c++
      Vistor cat;
      Node* n;
      n= File();
      n.accept(cat);
      n=Directory();
      n.accept(cat);
      #+end_src

      Common lisp 实现 cat函数。
      #+begin_src lisp
      (defclass node ()
        ((name :initarg :name)))
      (defclass file (node)())
      (defclass directory (node)())
      (defmethod cat ((node file))
        (print "cat file"))
      (defmethod cat ((node directory))
        (print "Error: can't cat a directory"))

      (setq n (make-instance 'file :name "aaa"))
      (cat n) ;;first cat method will be called
      (setq n (make-instance 'directory :name "bbb"))
      (cat n) ;; second cat method will be called
      #+end_src
      仅仅是分别增加对应参数类型的函数就行了。那为什么C++不定义两个这样的函数呢？
      #+begin_src c++
      void cat(File f){
        printf("cat file");
      }
      void cat(Directory d){
        printf("Error: can't cat a directory");
      }
      #+end_src
      那么调用时，根本不能统一调用，因为调用前，你就需要知道对象的类型。但如果写为以下接口
      #+begin_src c++
      void cat(Node* n){
        //
      }
      #+end_src
      则需要在cat函数内部判断n的类型。还是不行。 一般的动态语言也不行（比如perl)，都得判断实际类型，才好知道如何操作。

      由此，使用vistor对象的本质是：就是在vistor类中定义了class的虚函数（虽然与开头的结论相同，但理解不同了）。 vistor类中定义所有类型对应的viste函数，当object.accept调用时，就能够调用到viste(object)那个函数（从而实现虚函数）。

      最终目标是用户代码要一致，不能根据对象类型不同进行判断。

   3. C语言中的函数表，其实只是 single dispatch
** Implementation
*** C++
    - points
      - both function ~accept~ of class ~Element~ and function ~visit~ of class ~Vistor~ should be virtual function.
        virtual function is the only way that providing message dispatch at runtime in C++.
      - call sequence
      - A1, A2 实现中的accept 定义是必须的，不能直接在基类中定义。这样才能使不同的A的子类调用相应的visit函数。
      - 在V的visit函数中， A1， A2的所有方法都能够访问到，相当于通过组合的方式添加了一个功能。



    #+begin_src C++ :includes <iostream> 
    using namespace std;

    class A1;
    class A2;
    class V {
    public:
      virtual void visit(A1& a1){
        cout<<"V: a1"<<endl;
      }
      virtual void visit(A2& a2){
        cout<<"V: a2"<<endl;
      }
    };
    class V1:public V {
    public:
      void visit(A1& a1){
        cout<<"V1: a1"<<endl;
      }
      void visit(A2& a2){
        cout<<"V1: a2"<<endl;
      }
    };
    class V2:public V {
    public:
      void visit(A1& a1){
        cout<<"V2: a1"<<endl;
      }
      void visit(A2& a2){
        cout<<"V2: a2"<<endl;
      }
    };
    class A {
    public:
      virtual void accept(V& v)=0;
    };
    class A1:public A{
    public:
      void accept(V& v){
        v.visit(*this);
      }
    };
    class A2:public A{
    public:
      void accept(V& v){
        v.visit(*this);
      }
    };

    int main(){
      A1 a1;
      A2 a2;
      A* a = &a1;
      V1 v1;
      V2 v2;
      V* v=&v1;
      a->accept(*v);
      v=&v2;
      a->accept(*v);
      a = &a2;
      v=&v1;
      a->accept(*v);
      v=&v2;
      a->accept(*v);

      return 0;
    }
    #+end_src

    #+RESULTS:
    | V1: | a1 |
    | V2: | a1 |
    | V1: | a2 |
    | V2: | a2 |
    Note:
    - 感觉要做到的效果都是： 调用时，对于所有不同的情况，写法完全一致。 感觉所有design pattern 想要做到的效果都是这样。
    - Sun Sep  4 14:06:18 2016. 必须做笔记，不然完全会全忘掉。则当时的思考完全没有效果。

      

    
** 一篇好文章
   http://www.cnblogs.com/zuoxiaolong/p/pattern23.html
   文中提到的一个新的观点：
   vistor 可以visit不同类层次上的类。好处是这样对于所有同层次子类操作相同的vistor便可以只提供一个访问上一层次类的方法即可，而不用写两个相同的vistor函数（写下这些文字时，我想到通过增加一个公共的函数不就解决了）。为了实现这个，两个重要方面：
   1. AbstractBill 类为什么是需要的？
      这个类供vistor类使用，vistor类通过visit这个类的对象实现通用操作。
   2. AbstractViewer类为什么是需要的？
      这个类供Bill类使用， accept类通过判断是不是这个类，判断vistor是需要通用的还是专用的。
   
   
   文中的一个例子的疑问：
   对于类层次 A， A1， A2， 及一个函数： void func(A), 能否传入A1类型的参数？
   => 可以，完全没问题。 相当于是将子类的对象赋值给基类。 之前C++的问题不同，是交基类的对象赋值给子类，这种肯定不行
   #+begin_src java :classname Test
   class A {
   }
   class A1 extends A {}
   class A2 extends A {}
   
   class Test {
       static void foo(A a) {
       }
       public static void main(String[] args) {
           foo(new A1());
       }
   }
   #+end_src

   #+RESULTS:

