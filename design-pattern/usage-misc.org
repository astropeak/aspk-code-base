* design pattern
** C语言函数表与C++虚函数，对比
   用两种方法实现处理一个命令。
   command_handler(command)
   | command        | result                          |
   |----------------+---------------------------------|
   | echo str       | print string str                |
   | cat file_name  | print content of file file_name |
   | size file_name | print size of file file_name    |
*** C
    command dispatched by function table.
    #+begin_src C :includes <stdio.h>
    struct command{
      char* command_name;
      void (*handler)(char* arg);
    };

    void handle_echo(char* arg){
      printf("handle_echo\n");
    }
    void handle_cat(char* arg){
      printf("handle_cat\n");
    }
    struct command command_table[]={{"echo", handle_echo},
                                    {"cat", handle_cat}};

    void command_handler(char* command, char* arg) {
      int i=0;
      for (i = 0; i < 2; i++) {
        if (strcmp(command, command_table[i].command_name)==0){
          command_table[i].handler(arg);
          return;
        }
      }
      printf("no handler for command %s\n", command);
    }

    int main(int argc, char *argv[])
    {
      command_handler("echo", "aaaaa");
      command_handler("cat", "aaaaa");
      return 0;
    }

    #+end_src

    #+RESULTS:
    | handle_echo |
    | handle_cat  |

*** CPP
    #+begin_src C++ :includes '(<iostream> <cstring>)
    using namespace std;
    class CommandHandler {
    public:
      // command part 可以放在基类中。 或者把process定义成一个templete pattern, 子类只定义个性化的部分。
      virtual void process(char* arg) = 0;
    };
    class EchoCommandHandler: public CommandHandler{
    public:
      void process(char* arg){
        cout<<"handle echo"<<endl;
      }
    };
    class CatCommandHandler: public CommandHandler{
    public:
      void process(char* arg){
        cout<<"handle cat"<<endl;
      }
    };
    void command_handler(char* name, char* arg) {
      CommandHandler* ch;
      //此外定义一个工厂模式更好,根据name生成相应的类。
      if (strcmp(name, "echo")==0){
        ch = new EchoCommandHandler();
      } else {
        ch = new CatCommandHandler();
      }
      ch->process(arg);
    }
      
    int main(int argc, char *argv[])
    {
      command_handler("echo", "aaaaa");
      command_handler("cat", "aaaaa");
     
      return 0;
    }

    #+end_src

    #+RESULTS:
    | handle | echo |
    | handle | cat  |

*** compare
    一个函数表对应一个 virtual function， 感觉 二者实现的功能相同。
** items
   - coding on interface, not on concoret class. thus the code will not change when new classes added.
