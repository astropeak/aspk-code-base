* Template Method and Strategy Patterns
  Make high level alghorithm/process independent from low level details.

  High level common structure. Low level differences.
  Template method: make low level differences as virtual functions, and implements in sub class.
  Strategy: make low level differences a component, use deligation. Then the differences are independent form the high level. More flexiable.

  The BubbleSorter example given in book "Agile software development", chapter 14 is quite good.

  Inheritance is very strong relationship, the derived class depends on the base class, makes it hard to be reused. Composition is week relationship, each components can be indispensiable, so reuse them will be much easier.

  Strategy pattern is just the same method as passing function pointer in C programming.

  Template method and factory method: The first one is a regular non visual function, because it is the same for all derived classes, the second one is vitual function, because all derived classes have different behaver. The first one call some vitual functions to achieve different behaver for different derived classes.